{
  "name": "altium-intlib-parser",
  "version": "1.0.0",
  "description": "I need a parser written in typescript that can load the contents of a **Altium .IntLib file** and turn them into a js object with proper interfaces/types.\r <br /><br />\r The code need to be able to run in a **webworker** and also **node** context. Therefore **can't depend on browser objects** like document and so on.\r <br /><br />\r ## Acceptance Criteria\r Take any *.IntLib file from snapeda.com (you can sign up for a free account) such as this one https://www.snapeda.com/parts/ESP32S2/Espressif%20Systems/view-part/?ref=search&t=ESP32 and parse it properly.\r <br /><br />\r Provide **jest unit tests** to prove that it works across ~20 different .IntLib files from snapeda (I can provide those)\r <br /><br />\r ## Technical Details\r There is a a little info on how to read the binary file here\r <br /><br />\r 1. https://hackaday.com/2014/10/15/reverse-engineering-altium-files/\r 2. https://hackaday.io/project/3149-reverse-engineering-design-file-formats/details",
  "main": "index.js",
  "scripts": {
    "test": "jest",
    "start": "npx ts-node ./src/main.ts"
  },
  "overrides": {
    "ole-doc": {
      "underscore": "^1.13.6"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/CallumCM/Altium-IntLib-Parser.git"
  },
  "author": "",
  "bugs": {
    "url": "https://github.com/CallumCM/Altium-IntLib-Parser/issues"
  },
  "homepage": "https://github.com/CallumCM/Altium-IntLib-Parser#readme",
  "devDependencies": {
    "@types/jest": "^29.4.0",
    "@types/node": "^18.13.0",
    "jest": "^29.4.3",
    "ts-jest": "^29.0.5",
    "typescript": "^4.9.5"
  },
  "dependencies": {
    "ole-doc": "^0.1.1",
    "ts-node": "^10.9.1"
  }
}
